{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/maxhaggkvist/Documents/cross platform apps/crossplatform_finalApp/mobile_layer/components/newProject.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport Loading from \"./loading\";\nimport { globalStyles } from \"../styles/global\";\n\nvar NewProject = function NewProject(props) {\n  console.log(\"user passed from props: \" + props.user);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      load = _useState2[0],\n      setLoad = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newProjectTitle = _useState4[0],\n      setNewProjectTitle = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newProjectBody = _useState6[0],\n      setNewProjectBody = _useState6[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      setLoad(false);\n    }, 600);\n  }, [load]);\n\n  var createNewProject = function createNewProject() {\n    setLoad(true);\n    var newProject = {\n      user: props.user,\n      title: newProjectTitle,\n      body: newProjectBody,\n      createdAt: new Date(),\n      solved: false,\n      shared: false\n    };\n    firebase.firestore().collection(\"projectList\").doc(\"projects\").collection('users').doc(props.user).collection('userproject').add(_objectSpread({}, newProject)).then(function () {\n      console.log(\"created project\");\n    }).catch(function (err) {\n      console.log(err);\n    });\n    setLoad(false);\n    setNewProjectTitle(\"\");\n    setNewProjectBody(\"\");\n  };\n\n  var clearNewProjectBody = function clearNewProjectBody() {\n    setNewProjectTitle(\"\");\n    setNewProjectBody(\"\");\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, load ? React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }) : React.createElement(View, {\n    style: globalStyles.projectCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 29\n    }\n  }, React.createElement(View, {\n    style: globalStyles.projectCardHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: globalStyles.projectTitle,\n    placeholder: \"project title\",\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    onChangeText: function onChangeText(val) {\n      return setNewProjectTitle(val);\n    },\n    value: newProjectTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: globalStyles.projectCardContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"project description\",\n    multiline: true,\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    onChangeText: function onChangeText(val) {\n      return setNewProjectBody(val);\n    },\n    value: newProjectBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })), React.createElement(View, {\n    style: globalStyles.projectIconRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return clearNewProjectBody();\n    },\n    style: globalStyles.projectIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"clear\",\n    size: 40,\n    color: \"coral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return createNewProject();\n    },\n    style: globalStyles.projectIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, React.createElement(MaterialIcons, {\n    name: \"note-add\",\n    size: 40,\n    color: \"coral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default NewProject;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/Users/maxhaggkvist/Documents/cross platform apps/crossplatform_finalApp/mobile_layer/components/newProject.js"],"names":["React","useState","useEffect","MaterialIcons","firebase","Loading","globalStyles","NewProject","props","console","log","user","load","setLoad","newProjectTitle","setNewProjectTitle","newProjectBody","setNewProjectBody","setTimeout","createNewProject","newProject","title","body","createdAt","Date","solved","shared","firestore","collection","doc","add","then","catch","err","clearNewProjectBody","projectCard","projectCardHeader","projectTitle","val","projectCardContent","projectIconRow","projectIcon","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\nimport Loading from \"./loading\";\nimport { globalStyles } from \"../styles/global\";\n\nconst NewProject = (props) => {\n\n  console.log(\"user passed from props: \" + props.user);\n  const [load, setLoad] = useState(true);\n  const [newProjectTitle, setNewProjectTitle] = useState();\n  const [newProjectBody, setNewProjectBody] = useState();\n\n  useEffect(() => {\n    \n    setTimeout(() => {\n      setLoad(false);\n    }, 600);\n\n  }, [load])\n\n  const createNewProject = () => {\n    setLoad(true);\n\n    const newProject = {\n      user: props.user,\n      title: newProjectTitle,\n      body: newProjectBody,\n      createdAt: new Date(),\n      solved: false,\n      shared: false,\n    };\n\n    firebase\n      .firestore()\n      .collection(\"projectList\")\n      .doc(\"projects\")\n      .collection('users')\n      .doc(props.user)\n      .collection('userproject')\n      .add({\n        ...newProject,\n      })\n      .then(() => {\n        console.log(\"created project\");\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n    setLoad(false);\n    setNewProjectTitle(\"\");\n    setNewProjectBody(\"\");\n  };\n\n  const clearNewProjectBody = () => {\n    setNewProjectTitle(\"\");\n    setNewProjectBody(\"\");\n  };\n\n  return (\n    <View>\n      {load ? <Loading /> : <View style={globalStyles.projectCard}>\n        <View style={globalStyles.projectCardHeader}>\n          <TextInput\n            style={globalStyles.projectTitle}\n            placeholder=\"project title\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            onChangeText={(val) => setNewProjectTitle(val)}\n            value={newProjectTitle}\n          ></TextInput>\n        </View>\n\n        <View style={globalStyles.projectCardContent}>\n          <TextInput\n            placeholder=\"project description\"\n            multiline={true}\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            onChangeText={(val) => setNewProjectBody(val)}\n            value={newProjectBody}\n          ></TextInput>\n        </View>\n\n          <View style={globalStyles.projectIconRow}>\n            <TouchableOpacity\n              onPress={() => clearNewProjectBody()}\n              style={globalStyles.projectIcon}\n            >\n              <MaterialIcons name=\"clear\" size={40} color=\"coral\" />\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => createNewProject()}\n              style={globalStyles.projectIcon}\n            >\n              <MaterialIcons name=\"note-add\" size={40} color=\"coral\" />\n            </TouchableOpacity>\n          </View>\n        </View>\n      }\n      \n    </View>\n  );\n};\n\nexport default NewProject;\n\nconst styles = StyleSheet.create({});\n"]},"metadata":{},"sourceType":"module"}