{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/maxhaggkvist/Documents/cross platform apps/crossplatform_finalApp/mobile_layer/components/flatlistProjectItem.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { globalStyles } from \"../styles/global\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nvar FlatListProjectItem = function FlatListProjectItem(props) {\n  console.log(\"user passed from props: \" + props.user);\n  console.log('list passed from props' + JSON.stringify(props.project));\n\n  var _useState = useState(props.project.solved),\n      _useState2 = _slicedToArray(_useState, 2),\n      solved = _useState2[0],\n      setSolved = _useState2[1];\n\n  var _useState3 = useState(props.project.shared),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shared = _useState4[0],\n      setShared = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      comments = _useState6[0],\n      setComments = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loadSolved = _useState8[0],\n      setLoadSolved = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      loadShared = _useState10[0],\n      setLoadShared = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loadComments = _useState12[0],\n      setLoadComments = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      listComments = _useState14[0],\n      setListComments = _useState14[1];\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      emptyComments = _useState16[0],\n      setEmptyComments = _useState16[1];\n\n  var toggleSolved = function toggleSolved(id) {\n    console.log('toggle solved');\n    setLoadSolved(true);\n    setTimeout(function () {\n      if (solved) {\n        setSolved(false);\n        firebase.firestore().collection(\"projectList\").doc(\"projects\").collection('users').doc(props.user).collection('userproject').doc(id).update({\n          'solved': false\n        }).then(function () {\n          console.log(\"toggled project solved to false\");\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        setSolved(true);\n        firebase.firestore().collection(\"projectList\").doc(\"projects\").collection('users').doc(props.user).collection('userproject').doc(id).update({\n          'solved': true\n        }).then(function () {\n          console.log(\"toggled project solved to true\");\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n\n      setLoadSolved(false);\n    }, 1200);\n  };\n\n  var toggleShared = function toggleShared(id) {\n    console.log('toggle shared');\n    setLoadShared(true);\n    setTimeout(function () {\n      if (shared) {\n        setShared(false);\n        firebase.firestore().collection(\"projectList\").doc(\"projects\").collection('users').doc(props.user).collection('userproject').doc(id).update({\n          'shared': false\n        }).then(function () {\n          console.log(\"toggled project shared to false\");\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        setShared(true);\n        firebase.firestore().collection(\"projectList\").doc(\"projects\").collection('users').doc(props.user).collection('userproject').doc(id).update({\n          'shared': true\n        }).then(function () {\n          console.log(\"toggled project shared to true\");\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n\n      setLoadShared(false);\n    }, 1200);\n  };\n\n  var toggleComments = function toggleComments(id) {\n    console.log('toggle comments');\n    setLoadComments(true);\n    setTimeout(function () {\n      if (comments) {\n        setComments(false);\n\n        function getComments() {\n          var commentList, projectComments, jsonComment;\n          return _regeneratorRuntime.async(function getComments$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  commentList = [];\n                  console.log(\"fetching comments for project: \" + id);\n                  _context.next = 4;\n                  return _regeneratorRuntime.awrap(fetch(\"http://192.168.0.2:3000/project-comments\", {\n                    method: \"GET\",\n                    headers: {\n                      user: props.user,\n                      id: id\n                    }\n                  }));\n\n                case 4:\n                  projectComments = _context.sent;\n                  _context.next = 7;\n                  return _regeneratorRuntime.awrap(projectComments.json());\n\n                case 7:\n                  jsonComment = _context.sent;\n                  jsonComment.forEach(function (commentFound) {\n                    commentList.push(commentFound.comment);\n                  });\n                  setListComments(commentList);\n\n                  if (commentList.length > 0) {\n                    setEmptyComments(true);\n                  } else {\n                    setEmptyComments(false);\n                  }\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        }\n\n        try {\n          getComments();\n        } catch (error) {\n          console.log(error);\n          setComments(false);\n        }\n      } else {\n        setComments(true);\n      }\n\n      setLoadComments(false);\n    }, 1200);\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: globalStyles.projectCardHeader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: globalStyles.projectTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, props.project.title)), React.createElement(View, {\n    style: globalStyles.projectCardContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, comments ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 33\n    }\n  }, emptyComments ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 42\n    }\n  }, listComments && listComments.map(function (comment, index) {\n    return React.createElement(View, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 37\n      }\n    }, comment.comment), React.createElement(Text, {\n      style: globalStyles.smallText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 37\n      }\n    }, comment.createdAt));\n  })) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 27\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, \"no comments on this project\"))) : React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 31\n    }\n  }, props.project.body))), React.createElement(View, {\n    style: globalStyles.projectIconRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return toggleSolved(props.project.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 25\n    }\n  }, loadSolved ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 43\n    }\n  }) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 80\n    }\n  }, solved ? React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"check-box\",\n    size: 24,\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 43\n    }\n  }) : React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"check-box-outline-blank\",\n    size: 24,\n    color: \"gray\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 38\n    }\n  }))), React.createElement(Text, {\n    style: globalStyles.projectIconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }, \" solved \")), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return toggleShared(props.project.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 25\n    }\n  }, loadShared ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 43\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 33\n    }\n  })) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 39\n    }\n  }, shared ? React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"screen-share\",\n    size: 24,\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 47\n    }\n  }) : React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"stop-screen-share\",\n    size: 24,\n    color: \"gray\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 42\n    }\n  }))), React.createElement(Text, {\n    style: globalStyles.projectIconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }, \" shared \")), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 21\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return toggleComments(props.project.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  }, loadComments ? React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 45\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 33\n    }\n  })) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 39\n    }\n  }, comments ? React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"comment\",\n    size: 24,\n    color: \"green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 49\n    }\n  }) : React.createElement(MaterialIcons, {\n    style: globalStyles.projectIcon,\n    name: \"comment\",\n    size: 24,\n    color: \"gray\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 42\n    }\n  }))), React.createElement(Text, {\n    style: globalStyles.projectIconText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 25\n    }\n  }, \" comments \"))));\n};\n\nexport default FlatListProjectItem;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["/Users/maxhaggkvist/Documents/cross platform apps/crossplatform_finalApp/mobile_layer/components/flatlistProjectItem.js"],"names":["React","useState","globalStyles","MaterialIcons","firebase","FlatListProjectItem","props","console","log","user","JSON","stringify","project","solved","setSolved","shared","setShared","comments","setComments","loadSolved","setLoadSolved","loadShared","setLoadShared","loadComments","setLoadComments","listComments","setListComments","emptyComments","setEmptyComments","toggleSolved","id","setTimeout","firestore","collection","doc","update","then","catch","err","toggleShared","toggleComments","getComments","commentList","fetch","method","headers","projectComments","json","jsonComment","forEach","commentFound","push","comment","length","error","projectCardHeader","projectTitle","title","projectCardContent","map","index","smallText","createdAt","body","projectIconRow","projectIcon","projectIconText","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n    ActivityIndicator\n} from \"react-native\";\nimport { globalStyles } from \"../styles/global\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport * as firebase from \"firebase\";\nimport \"firebase/firestore\";\n\nconst FlatListProjectItem = (props) => {\n    console.log(\"user passed from props: \" + props.user);\n    console.log('list passed from props' +  JSON.stringify(props.project));\n    const [solved, setSolved] = useState(props.project.solved);\n    const [shared, setShared] = useState(props.project.shared);\n    const [comments, setComments] = useState(false);\n    const [loadSolved, setLoadSolved] = useState(false);\n    const [loadShared, setLoadShared] = useState(false);\n    const [loadComments, setLoadComments] = useState(false);\n    const [listComments, setListComments] = useState();\n    const [emptyComments, setEmptyComments] = useState();\n\n    const toggleSolved = (id) => {\n        console.log('toggle solved');\n        setLoadSolved(true);\n        setTimeout(() => {\n            if (solved) {\n                setSolved(false);\n                firebase\n                .firestore()\n                .collection(\"projectList\")\n                .doc(\"projects\")\n                .collection('users')\n                .doc(props.user)\n                .collection('userproject')\n                .doc(id)\n                .update({'solved': false})\n                .then(() => {\n                  console.log(\"toggled project solved to false\");\n                })\n                .catch((err) => {\n                  console.log(err);\n                });\n            }\n            else {\n                setSolved(true);\n                firebase\n                .firestore()\n                .collection(\"projectList\")\n                .doc(\"projects\")\n                .collection('users')\n                .doc(props.user)\n                .collection('userproject')\n                .doc(id)\n                .update({'solved': true})\n                .then(() => {\n                  console.log(\"toggled project solved to true\");\n                })\n                .catch((err) => {\n                  console.log(err);\n                });\n            }\n            setLoadSolved(false);\n        }, 1200);\n    }\n\n    const toggleShared = (id) => {\n        console.log('toggle shared');\n        setLoadShared(true);\n        setTimeout(() => {\n            if (shared) {\n                setShared(false);\n                firebase\n                .firestore()\n                .collection(\"projectList\")\n                .doc(\"projects\")\n                .collection('users')\n                .doc(props.user)\n                .collection('userproject')\n                .doc(id)\n                .update({'shared': false})\n                .then(() => {\n                  console.log(\"toggled project shared to false\");\n                })\n                .catch((err) => {\n                  console.log(err);\n                });\n            }\n            else {\n                setShared(true);\n                firebase\n                .firestore()\n                .collection(\"projectList\")\n                .doc(\"projects\")\n                .collection('users')\n                .doc(props.user)\n                .collection('userproject')\n                .doc(id)\n                .update({'shared': true})\n                .then(() => {\n                  console.log(\"toggled project shared to true\");\n                })\n                .catch((err) => {\n                  console.log(err);\n                });\n            }\n            setLoadShared(false);\n        }, 1200);\n    }\n\n    const toggleComments = (id) => {\n        console.log('toggle comments');\n        setLoadComments(true);\n        setTimeout(() => {\n            if (comments) {\n                setComments(false);\n\n                async function getComments() {\n                    const commentList = [];\n                    console.log(\"fetching comments for project: \" + id);\n                    const projectComments = await fetch(\n                        \"http://192.168.0.2:3000/project-comments\",\n                        {\n                            method: \"GET\",\n                            headers: {\n                                user: props.user,\n                                id: id,\n                            },\n                        }\n                    );\n\n                    const jsonComment = await projectComments.json();\n                    jsonComment.forEach((commentFound) => {\n                        commentList.push(commentFound.comment);\n                    });\n                    \n                    setListComments(commentList);\n                    if (commentList.length > 0) {\n                        setEmptyComments(true);\n                    }\n                    else {\n                        setEmptyComments(false);\n                    }\n                }\n\n                try {\n\n                    getComments();\n\n                } catch (error) {\n                    console.log(error);\n                    setComments(false);\n                }\n            }\n            else {\n                setComments(true);\n            }\n            setLoadComments(false);\n        }, 1200);\n    }\n\n    return (\n        <View>\n            <View style={globalStyles.projectCardHeader}>\n                <Text style={globalStyles.projectTitle}>{props.project.title}</Text>\n            </View>\n\n            <View style={globalStyles.projectCardContent}>\n                <View>\n                    {comments ? <View>\n                        \n                        {emptyComments ? <View>{listComments && listComments.map((comment, index) => {\n                            return (\n                                <View key={index}>\n                                    <Text>{comment.comment}</Text>\n                                    <Text style={globalStyles.smallText}>{comment.createdAt}</Text>\n                                </View>\n                            )\n                        })}</View> \n                        \n                        : <View><Text>no comments on this project</Text></View>}\n\n                    </View> : <Text>{props.project.body}</Text>}\n\n                </View>\n            </View>\n\n         \n                <View style={globalStyles.projectIconRow}>\n                    <View>\n                        <TouchableOpacity onPress={() => toggleSolved(props.project.id)}>\n                            {loadSolved ? <ActivityIndicator size=\"small\" /> : <View>\n\n                                {solved ? <MaterialIcons\n                                    style={globalStyles.projectIcon}\n                                    name=\"check-box\"\n                                    size={24}\n                                    color=\"green\"\n                                /> : <MaterialIcons\n                                        style={globalStyles.projectIcon}\n                                        name=\"check-box-outline-blank\"\n                                        size={24}\n                                        color=\"gray\"\n                                    />}\n                            </View>}\n\n                        </TouchableOpacity>\n                        <Text style={globalStyles.projectIconText}> solved </Text>\n                    </View>\n\n                    <View>\n                        <TouchableOpacity onPress={() => toggleShared(props.project.id)}>\n                            {loadShared ? <View>\n                                <ActivityIndicator size=\"small\" />\n                            </View> : <View>\n                                    {shared ? <MaterialIcons\n                                        style={globalStyles.projectIcon}\n                                        name=\"screen-share\"\n                                        size={24}\n                                        color=\"green\"\n                                    /> : <MaterialIcons\n                                            style={globalStyles.projectIcon}\n                                            name=\"stop-screen-share\"\n                                            size={24}\n                                            color=\"gray\"\n                                        />}\n                                </View>}\n\n                        </TouchableOpacity>\n                        <Text style={globalStyles.projectIconText}> shared </Text>\n                    </View>\n\n                    <View>\n                        <TouchableOpacity onPress={() => toggleComments(props.project.id)}>\n                            {loadComments ? <View>\n                                <ActivityIndicator size=\"small\" />\n                            </View> : <View>\n                                    {comments ? <MaterialIcons\n                                        style={globalStyles.projectIcon}\n                                        name=\"comment\"\n                                        size={24}\n                                        color=\"green\"\n                                    /> : <MaterialIcons\n                                            style={globalStyles.projectIcon}\n                                            name=\"comment\"\n                                            size={24}\n                                            color=\"gray\"\n                                        />}\n\n                                </View>}\n\n                        </TouchableOpacity>\n                        <Text style={globalStyles.projectIconText}> comments </Text>\n                    </View>\n\n                </View>\n           \n        </View>\n    )\n}\n\nexport default FlatListProjectItem\n\nconst styles = StyleSheet.create({})\n"]},"metadata":{},"sourceType":"module"}